# -*- coding: utf-8 -*-
"""zach_granados-4_assignment(Notebook).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m7y2ZWsHc1RwK5DXpoWG_aqseHimLUbX

# **SI311 W25 Altair Homework #4**
## Overview

We'll focus on maps and cartrographic visualization. In this lab, you will practice:
* Point Maps
* Symbol Maps
* Choropleth maps
* Interactions with maps


After building these charts, you will make a website with these charts using streamlit.

### Lab Instructions

*   Save, rename, and submit the ipynb file (use your username in the name).
*   Complete all the checkpoints, to create the required visualization at each cell.
*   Run every cell (do Runtime -> Restart and run all to make sure you have a clean working version), print to pdf, submit the pdf file.
*   If you end up stuck, show us your work by including links (URLs) that you have searched for. You'll get partial credit for showing your work in progress.
"""

import pandas as pd
import altair as alt
from vega_datasets import data
import streamlit as st

alt.data_transformers.disable_max_rows()

df = pd.read_csv('https://raw.githubusercontent.com/pratik-mangtani/si649-hw/main/airports.csv')
url = "https://raw.githubusercontent.com/pratik-mangtani/si649-hw/main/small-airports.json"

"""## Visualization 1: Dot Density Map

![vis1](https://pratik-mangtani.github.io/si649-hw/dot_density.png)
**Description of the visualization:**

We want to visualize the density of small airports in the world. Each small airport is represented by a dot.
The visualization has two layers:
* The base layer shows the outline of the world map.
* The point map shows different small airports.
* The tooltip shows the **name** of the airport.

**Hint:**
* How can we show continents on the map? Which object can be used from the json dataset ?
* How can we show only small airports on the map?
"""

# TODO: Vis 1
map = alt.topo_feature(data.world_110m.url, 'land')

base = alt.Chart(map).mark_geoshape(
    fill='lightgray',
    stroke='white'
).properties(
    width=800,
    height=600,
    title="Small airports in the world"
).project('equirectangular')

airports = alt.Chart(df).transform_filter(
    alt.datum.type == 'small_airport'
).mark_circle(
    size=10,
    color='red'
).encode(
    longitude='longitude_deg:Q',
    latitude='latitude_deg:Q',
    tooltip='name:N'
)

small_airport_chart = base + airports
small_airport_chart

"""## Visualization 2: Propotional Symbol

![vis2](https://pratik-mangtani.github.io/si649-hw/symbol_map.png)
**Description of the visualization:**

The visualization shows faceted maps pointing the 20 most populous cities in the world by 2100. There are two layers in faceted charts:
* The base layer shows the map of countries.
* The second layer shows size encoded points indicating the population of those countries.
* Tooltip shows **city** name and **population**.

**Hint:**
* Which projection has been used in individual charts?
* How to create a faceted chart with different years and 2 columns?
"""

countries_url = data.world_110m.url
source = 'https://raw.githubusercontent.com/pratik-mangtani/si649-hw/main/population_prediction.csv'

# TODO: Vis 2
populations_df = pd.read_csv(source)

populations_df['rank'] = populations_df.groupby('year')['population'].rank(ascending=False, method='first')
populations_df = populations_df[populations_df['rank'] <= 20]

# World map topology
world = alt.topo_feature(data.world_110m.url, 'countries')

# Base map layer (no data needed)
world_map = alt.Chart(world).mark_geoshape(
    fill='lightgray',
    stroke='white'
).project(
    'equirectangular'
)

# Points layer (uses population data)
points = alt.Chart().mark_circle(
    color='green',
    opacity=0.7
).encode(
    longitude='lon:Q',
    latitude='lat:Q',
    size=alt.Size('population:Q', title='Population (million)', scale=alt.Scale(range=[10, 300])),
    tooltip=['city:N', 'population:Q']
)

# Combine layers and provide data at the top-level
layer = alt.layer(
    world_map,
    points,
    data=populations_df
).resolve_scale(
    size='independent'
)

world_pop_chart = layer.facet(
    facet=alt.Facet('year:N', title='Year'),
    columns=2
).properties(
    title='The 20 Most Populous Cities in the World by 2100'
)

world_pop_chart

"""## Visualization 3: Hurricane Trajectories

![vis3](https://pratik-mangtani.github.io/si649-hw/hurricane_trajectories.png)
**Description of the visualization:**

Create a map that shows the paths (trajectories) of the 2017 hurricanes. Filter the data so that only 2017 hurricanes are shown. Remove Alaska and Hawaii from the map (Filter out ids 2 and 15).

**Hint:**
* How will you filter out 2017 hurricanes?
* Which object can be used to show state boundaries?

**Everytime I tried to use AlbersUSA as a projection, the latitude and longitude would get messed up and all of the hurricanes would originiate in the far left hand corner of the visualization, for accuracy, I decided to keep Alaska in, but note, all of the Alaska identifiers have been filtered out**
"""

states_url = data.us_10m.url
hurricane_data = pd.read_csv('https://raw.githubusercontent.com/pratik-mangtani/si649-hw/main/hurdat2.csv')
hurricane_data.sample(3)

#TODO: Vis 3
hurricane_data['datetime'] = pd.to_datetime(hurricane_data['datetime'])
hurricane_data = hurricane_data[hurricane_data['datetime'].dt.year == 2017]

hurricane_data = hurricane_data[~hurricane_data["identifier"].isin(["AL022017", "AL152017"])]

country = alt.topo_feature(data.us_10m.url, feature='countries')

us = alt.topo_feature(data.world_110m.url, 'countries')

# Filter for only the United States (ID for US in the world topology is 840)
us_map = alt.Chart(us).mark_geoshape(
    fill='lightgray',
    stroke='white'
).encode(
    tooltip='name:N'  # Optional: Show country name on hover
).transform_filter(
    alt.datum.id == 840  # US country ID in the world map
)

# Paths layer (showing hurricane paths)
paths = alt.Chart(hurricane_data).mark_line(
    color='blue',
    opacity=0.7
).encode(
    longitude='longitude:Q',
    latitude='latitude:Q',
)

# Combine the map and the paths layers
hurricane_chart = alt.layer(
    us_map,
    paths
).properties(
    title='Hurricane Trajectories of 2017 in the United States (Excluding AL022017 and AL152017)',
    width=800,
    height=600
).configure_view(
    stroke=None  # Remove borders between facets
)

hurricane_chart

"""## Visualization 4: Choropleth Map

![vis4](https://pratik-mangtani.github.io/si649-hw/choropleth.png)

**Interaction**

![vis4](https://pratik-mangtani.github.io/si649-hw/choropleth-interaction.gif)

**Description of the visualization:**

The visualization has a choropleth map showing the population of different states and a sorted bar chart showing the top 15 states by population. These charts are connected using a click interaction.

**Hint**

* Which object can be used to show states on the map?
* Which transform can be used to add population data to the geographic data? How can we combine two datasets in Altair?
"""

state_map = data.us_10m.url
state_pop = data.population_engineers_hurricanes()[['state', 'id', 'population']]
state_pop.sample(5)

# TODO: Vis 4
states = alt.topo_feature(data.us_10m.url, feature='states')

click = alt.selection_single(fields=['id'], bind='legend', on='click', clear='hover')

choropleth_map = alt.Chart(states).mark_geoshape().encode(
    color=alt.Color('population:Q', legend=alt.Legend(title='Population')),
    opacity=alt.condition(click, alt.value(1), alt.value(0.3))
).transform_lookup(
    lookup='id',
    from_=alt.LookupData(state_pop, 'id', ['population', 'state'])
).add_params(
    click
).properties(
    width=800,
    height=500,
    title='U.S. States Population'
).project('albersUsa')

bar_chart = alt.Chart(state_pop.sort_values('population', ascending=False).head(15)).mark_bar().encode(
    x=alt.X('population:Q', title='Population'),
    y=alt.Y('state:N', sort='-x', title='State'),
    color='population:Q',
    opacity=alt.condition(click, alt.value(1), alt.value(0.3)),
    tooltip=['state:N', 'population:Q']
).add_params(
    click
).properties(
    width=400,
    height=300,
    title='Top 15 States by Population'
)

double_chart = alt.hconcat(
    choropleth_map,
    bar_chart
).configure_view(
    stroke=None  # Remove border
)

double_chart

st.title('Data Visualizations')
st.subheader('Small Airport Populations by State')
st.altair_chart(small_airport_chart, use_container_width=True)

st.subheader('Top 5 Most Populous Countries in 2023')
st.altair_chart(world_pop_chart, use_container_width=True)

st.subheader('Hurricane Paths of 2017')
st.altair_chart(hurricane_chart, use_container_width=True)

st.subheader('U.S. States Population and Top 15 States by Population')
st.altair_chart(double_chart, use_container_width=True)